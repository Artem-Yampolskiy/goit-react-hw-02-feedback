{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Statistics/Statistics.jsx","components/feedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.jsx","index.js","components/feedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","styles","text","FeedbackOptions","options","onLeaveFeedback","container","map","option","type","onClick","button","prototype","PropTypes","arrayOf","oneOf","isRequired","func","Section","title","children","Notification","message","App","state","incrementFeedback","stateName","setState","prevState","countTotalFeedback","Object","values","reduce","stateQuantity","countPositiveFeedbackPercentage","Math","round","this","keys","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oJACAA,EAAOC,QAAU,CAAC,KAAO,2B,gJCsBVC,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC7C,OACI,qCACI,oBAAGC,UAAWC,IAAOC,KAArB,mBAAkCP,KAClC,oBAAGK,UAAWC,IAAOC,KAArB,sBAAqCN,KACrC,oBAAGI,UAAWC,IAAOC,KAArB,kBAAiCL,KACjC,oBAAGG,UAAWC,IAAOC,KAArB,oBAAmCJ,KACnC,oBAAGE,UAAWC,IAAOC,KAArB,gCAA+CH,EAA/C,W,gCCPNI,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACE,qBAAKL,UAAWC,IAAOK,UAAvB,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACEC,KAAK,SAELC,QAAS,kBAAKL,EAAgBG,IAE9BR,UAAWC,IAAOU,OALpB,SAOGH,GALIA,WAajBL,EAAgBS,UAAY,CACxBR,QAASS,IAAUC,QAAQD,IAAUE,MAAM,CAAC,OAAQ,UAAW,SAASC,WACxEX,gBAAiBQ,IAAUI,KAAKD,YAGrBb,Q,gBCbAe,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,0BAASpB,UAAWC,IAAOK,UAA3B,UACE,oBAAIN,UAAWC,IAAOkB,MAAtB,SAA8BA,IAC7BC,MCEUC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCKpCC,E,4MAKFC,MAAQ,CACJ7B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGT4B,kBAAoB,SAAAC,GAChB,EAAKC,UAAS,SAAAC,GAAS,sBAClBF,EAAYE,EAAUF,GAAa,O,EAI5CG,mBAAqB,kBACjBC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAAClC,EAAOmC,GAAR,OAA0BnC,EAAQmC,IAAe,I,EAEtFC,gCAAkC,kBAC9B,EAAKL,qBAAuBM,KAAKC,MAAyB,IAAlB,EAAKZ,MAAM7B,KAAc,EAAKkC,sBAAwB,G,4CAElG,WACI,IACIL,EAIAa,KAJAb,MACAK,EAGAQ,KAHAR,mBACAK,EAEAG,KAFAH,gCACAT,EACAY,KADAZ,kBAEJ,OACI,qCACI,cAAC,EAAD,CAASN,MAAM,wBAAf,SACI,cAAC,EAAD,CACIf,QAAS0B,OAAOQ,KAAKd,GACrBnB,gBAAiBoB,MAGzB,cAAC,EAAD,CAASN,MAAM,aAAf,SACKU,IAAuB,EACpB,cAAC,EAAD,CACIlC,KAAM6B,EAAM7B,KACZC,QAAS4B,EAAM5B,QACfC,IAAK2B,EAAM3B,IACXC,MAAO+B,IACP9B,mBAAoBmC,MAExB,cAAC,EAAD,CAAcZ,QAAQ,+B,GA/C5BiB,aAAZhB,EACKiB,aAAe,GAsDXjB,QCxDfkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BrD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,OAAS,kC,kBCA1ED,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,0B","file":"static/js/main.43b1c480.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Statistics_text__2bTJl\"};","import PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        <>\r\n            <p className={styles.text}>Good: {good}</p>\r\n            <p className={styles.text}>Neutral: {neutral}</p>\r\n            <p className={styles.text}>Bad: {bad}</p>\r\n            <p className={styles.text}>Total: {total}</p>\r\n            <p className={styles.text}>Positive Feedback: {positivePercentage}%</p>\r\n        </>\r\n    );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        {options.map(option => (\r\n          <button\r\n            type=\"button\"\r\n            key={option}\r\n            onClick={()=> onLeaveFeedback(option)\r\n            }\r\n            className={styles.button}\r\n          >\r\n            {option}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.prototype = {\r\n    options: PropTypes.arrayOf(PropTypes.oneOf(['good', 'neutral', 'bad'])).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section className={styles.container}>\r\n    <h2 className={styles.title}>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import { Component } from 'react';\n\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/feedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n    static defaultProps = {};\n\n    static propTypes = {};\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    };\n\n    incrementFeedback = stateName => {\n        this.setState(prevState => ({\n            [stateName]: prevState[stateName] + 1,\n        }));\n    };\n\n    countTotalFeedback = () =>\n        Object.values(this.state).reduce((total, stateQuantity) => total + stateQuantity, 0,);\n    \n    countPositiveFeedbackPercentage = () =>\n        this.countTotalFeedback() ? Math.round((this.state.good * 100) / this.countTotalFeedback()) : 0;\n\n    render() {\n        const {\n            state,\n            countTotalFeedback,\n            countPositiveFeedbackPercentage,\n            incrementFeedback,\n        } = this;\n        return (\n            <>\n                <Section title=\"Please leave feedback\">\n                    <FeedbackOptions\n                        options={Object.keys(state)}\n                        onLeaveFeedback={incrementFeedback}\n                    />\n                </Section>\n                <Section title=\"Statistics\">\n                    {countTotalFeedback() > 0 ? (\n                        <Statistics\n                            good={state.good}\n                            neutral={state.neutral}\n                            bad={state.bad}\n                            total={countTotalFeedback()}\n                            positivePercentage={countPositiveFeedbackPercentage()}\n                        />) : (\n                        <Notification message=\"No feedback given\" />\n                    )}\n                </Section>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FeedbackOptions_container__3x0KL\",\"button\":\"FeedbackOptions_button__3xUSQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__OZKIy\",\"title\":\"Section_title__UuH5E\"};"],"sourceRoot":""}